# Lab Report: Monitoring
___
**Course:** CIS 411, Spring 2021  
**Instructor(s):** [Trevor Bunch](https://github.com/trevordbunch)  
**Name:** Colin Robson  
**GitHub Handle:** @CRobson9000  
**Repository:** [My Repository](https://github.com/CRobson9000/cis411_lab5_Monitoring/tree/main)  
**Collaborators:** 
___

# Step 1: Fork this repository
- The URL of my forked repository: https://github.com/CRobson9000/cis411_lab5_Monitoring/tree/main

# Step 2: Clone your forked repository from the command line
- My GraphQL response from adding myself as an account on the test project
```
{
  {
  "data": {
    "mutateAccount": {
      "id": "4ca80b53-b583-4d37-b4b9-0f53b5ce1681",
      "name": "Colin James Robson",
      "email": "cjrtwin0901@gmail.com"
    }
  }
}
}
```

# Step 3: Signup for and configure New Relic
- The chosen name of your New Relic ```app_name``` configuration
```
app_name: ['<Lab 7 Monitoring>']
```

# Step 4: Exercising the application / generating performance data

_Note: No lab notes required._

# Step 5: Explore your performance data
* What are your observations regarding the performance of this application? 
  > Overall, the query runtimes were scattered performace-wise.  The first and and sixth query ran very slow while the others ran very fast.  The transaction time for the first query was 8 seconds and the transaction time for the sixth query was 36 seconds.  The other queries ran so fast that they didn't even show up on the graph.  The last one had an error, so it didn't even run. 
* Is performance even or uneven? 
  > The performance was very uneven and this is shown in my explanation above.  
* Between queries and mutations, what requests are less performant? 
  > The first and sixth queries ran the slowest (times shown above).
* Among the less performant requests, which ones are the most problematic?
  > The sixth one took more than four times the amount of time to run than the first one, which was the second slowest one.  

# Step 6: Diagnosing an issue based on telemetry data
* Within the transactions you're examining, what segment(s) took the most time?
  > The remainder section of the transaction for the sixth query took the most time.  
* Using New Relic, identify and record the least performant request(s).
  > The sixth query was the one that took the longest to respond
* Using the Transaction Trace capability in New Relic, identify which segment(s) in that request permeation is/are the most problematic and record your findings.
  > The remainder section was the most problematic as it took 95% of the entire time to run the request.
* Recommend a solution for improving the performance of those most problematic request(s) / permeation(s).
  > I'm not sure what the remainder section of the query is, but it sounds like it's the part that comes after all of the orders have been loaded.  There were a total of 890 orders that contained the word "everything".  To solve this issues, maybe you could narrow that search down just a bit more with another key word so it would have to do less work on each order, therefore cutting time in the remainder section.  

# Step 7: Submitting a Pull Request
_Note: No lab notes required._